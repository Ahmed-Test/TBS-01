# ===================================================================
# Spring Boot configuration for the "prod" profile.
#
# This configuration overrides the application.yml file.
#
# More information on profiles: https://www.jhipster.tech/profiles/
# More information on configuration properties: https://www.jhipster.tech/common-application-properties/
# ===================================================================

# ===================================================================
# Standard Spring Boot properties.
# Full reference is available at:
# http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
# ===================================================================

logging:
  level:
    ROOT: DEBUG
    io.github.jhipster: DEBUG
    sa.tamkeentech.tbs: DEBUG
#    ROOT: INFO
#    sa.tamkeentech.tbs: INFO
#    io.github.jhipster: INFO

management:
  metrics:
    export:
      prometheus:
        enabled: false

spring:
  devtools:
    restart:
      enabled: false
    livereload:
      enabled: false
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://10.60.72.118:5432/billingdb
    username: bill_prod
    password: k*s@d$a!q&[aA
#    url: jdbc:postgresql://10.60.72.90:5432/tbs_prod
#    username: postgres
#    password: postgres
    hikari:
      poolName: Hikari
      auto-commit: false
  jpa:
    database-platform: io.github.jhipster.domain.util.FixedPostgreSQL95Dialect
    database: POSTGRESQL
    show-sql: false
    properties:
      hibernate.id.new_generator_mappings: true
      hibernate.connection.provider_disables_autocommit: true
      hibernate.cache.use_second_level_cache: true
      hibernate.cache.use_query_cache: false
      hibernate.generate_statistics: false
  # Replace by 'prod, faker' to add the faker context and have sample data loaded in production
  liquibase:
#    contexts: prod
    contexts: prod, faker
#    enabled: false
#  mail:
#    host: localhost
#    port: 25
#    username:
#    password:
  thymeleaf:
    cache: true

# ===================================================================
# To enable TLS in production, generate a certificate using:
# keytool -genkey -alias tbs -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650
#
# You can also use Let's Encrypt:
# https://maximilian-boehm.com/hp2121/Create-a-Java-Keystore-JKS-from-Let-s-Encrypt-Certificates.htm
#
# Then, modify the server.ssl properties so your "server" configuration looks like:
#
# server:
#    port: 443
#    ssl:
#        key-store: classpath:config/tls/keystore.p12
#        key-store-password: password
#        key-store-type: PKCS12
#        key-alias: tbs
#        # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
#        ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
# ===================================================================
server:
  port: 8081
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css, application/javascript, application/json
    min-response-size: 1024
  ssl:
    #key-store: tls/billing.tamkeentech.sa.jks
    key-store: classpath:config/tls/billing.tamkeentech.sa.jks
    key-store-password: tm1548pmHea92
    key-password: 12345
    key-store-type: jks
    key-alias: {7b395e87-6ae0-4ba4-a0b6-810dc72d734b}
    # The ciphers suite enforce the security by deactivating some old and deprecated SSL cipher, this list was tested against SSL Labs (https://www.ssllabs.com/ssltest/)
    ciphers: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 ,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
    #ciphers: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    #security test low: no 1.0
    enabled-protocols: TLSv1.1,TLSv1.2
  #security test high
  servlet:
    session:
      cookie:
        secure: true

# ===================================================================
# JHipster specific properties
#
# Full reference is available at: https://www.jhipster.tech/common-application-properties/
# ===================================================================

jhipster:
  http:
    cache: # Used by the CachingHttpHeadersFilter
      timeToLiveInDays: 1461
  cache: # Cache configuration
    ehcache: # Ehcache configuration
      time-to-live-seconds: 3600 # By default objects stay 1 hour in the cache
      max-entries: 1000 # Number of objects in each cache entry
  security:
    remember-me:
      # security key (this key should be unique for your application, and kept secret)
      key: 335bc1a4e014b0714dde2cfb47366375b63c2b80a90c3cde9a01456069f4f5d6e2b265ab505ed28c1e454a211b31ddcff723
  mail: # specific JHipster mail property, for standard properties see MailProperties
    base-url: https://billing.tamkeentech.sa
  metrics:
    logs: # Reports metrics in the logs
      enabled: false
      report-frequency: 60 # in seconds
  logging:
    use-json-format: false # By default, logs are not in Json format
    logstash: # Forward logs to logstash over a socket, used by LoggingConfiguration
      enabled: false
      host: localhost
      port: 5000
      queue-size: 512
  audit-events:
    retention-period: 30 # Number of days before audit events are deleted.

# ===================================================================
# Application specific properties
# Add your own application properties here, see the ApplicationProperties class
# to have type-safe configuration, like in the JHipsterProperties above
#
# More documentation is available at:
# https://www.jhipster.tech/common-application-properties/
# ===================================================================

# application:
tbs:
  sentry-url: https://86ae81ee91034904afa7c1d83fa5ac9e@debug.tamkeentech.sa/40
  payment:
    sadad-url: http://10.4.7.61:2020/sender/api/sadad/billloadrq
    sadad-application-id: 1
    credit-card-url: 'http://172.25.70.71:301/api/OnlinePayment'
    credit-card-refund-url: 'http://172.25.70.71:301/api/OnlinePayment/Refund'
    credit-card-biller-code: 'B1APP10092019'


    notification-client-id: '07a19e4224eb46ad988d6797fa7fff81'
    notification-client-secret: 'eC876200af3547129cbC03E7c29f1cDb'
    wahid-url: 'https://accounts.wahid.sa/auth/realms/wahid/protocol/openid-connect/token'
    wahid-secret: '076a2d1c-15c6-4abf-80a7-0b181f18d617'

    sts-secret-key: 'NzllYTk4MjU0ZTQ5M2JjZTJmMzg4NGRi'
    sts-response-back-url: 'https://platform.tamkeentech.sa/billing-system/STSResponse'
    sts-post-form-url: 'https://smartroute.stspayone.com/SmartRoutePaymentWeb/SRPayMsgHandler'
    sts-refund-and-inquiry: 'https://platform.tamkeentech.sa/billing-system/STSInquiryAndRefund'
    url: 'https://platform.tamkeentech.sa/billing-system/requestPayment?'

    payfort-sha-request-phrase: '$2y$10$b2XJU7zWg'
    payfort-sha-response-phrase: '$2y$10$MnMjJ0SM6'
    payfort-access-code: 'D3KyGokx8hLlQmOVszty'
    payfort-access-code-apple-pay: '5ODYV1FwvKEKGABmbQW2'
    payfort-merchant-identifier: 'e93bbe3b'

    payfort-url-json: 'https://platform.tamkeentech.sa/billing-system/PayfortPaymentApi'
    payfort-url-form: 'https://checkout.payfort.com/FortAPI/paymentPage'

    payfort-process-payment: 'https://platform.tamkeentech.sa/billing-system/PayfortPaymentProcessing'

    apple-pay-validate-session: 'https://platform.tamkeentech.sa/billing-system/apple-pay/generateSession'

  refund:
    sadad-url-refund: 'http://10.4.7.61:2020/Sender/api/Sadad/RefundLoadRq'
